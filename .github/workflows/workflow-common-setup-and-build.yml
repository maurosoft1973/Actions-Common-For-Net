name: Common .NET setup and build workflow

on:
  workflow_call:
    inputs:
      configuration:
        required: true
        type: string
        description: "The build configuration. Eg debug/release"

      productNamespacePrefix:
        required: false
        default: ""
        type: string
        description: "The namespace prefix used to exclude unrelated items for code coverage"

      useVisualStudioPreview:
        required: false
        default: false
        type: boolean
        description: "If the Visual Studio preview edition is used"

      useMauiCheckDotNetTool:
        required: false
        default: false
        type: boolean
        description: "Use the Maui Check dotnet tool to make sure Maui is up to date"

      solutionFile:
        required: false
        type: string
        description: "Optional name of a solution file founded in the srcFolder"

      srcFolder:
        required: false
        type: string
        default: "./"
        description: "The folder where the source can be found"

      performTests:
        required: false
        default: true
        type: boolean
        description: "If tests need to be conducted"

      testProjectsFile:
        required: false
        default: "**/*Test*.csproj"
        type: string
        description: "The path relative of srcFolder where test projects file found"

      coverletOutputformat:
        required: false
        default: "cobertura"
        type: string
        description: "Supported Formats: json, lcov, opencover, cobertura (default), teamcity. You can specify multiple output formats by separating them with a comma (,)"

      useNBGV:
        required: false
        default: true
        type: boolean
        description: "If uses NBGV"

      createArtifacts:
        required: false
        default: false
        type: boolean
        description: "If creates Artifacts"

      signArtifacts:
        required: false
        default: false
        type: boolean
        description: "If sign Artifacts"

      publishNuget:
        required: false
        default: false
        type: boolean
        description: "Publish to Nuget"

      publishCustomNuget:
        required: false
        default: false
        type: boolean
        description: "Publish to Nuget"

      createRelease:
        required: false
        default: false
        type: boolean
        description: "Create release"

      installWorkflows:
        required: false
        default: false
        type: boolean
        description: "If installs Workflows"

      dotNetBuild:
        required: false
        default: true
        type: boolean
        description: "If to use a SDK build"

    secrets:
      SIGN_CLIENT_USER_ID:
        required: false
      SIGN_CLIENT_SECRET:
        required: false
      SIGN_CLIENT_CONFIG:
        required: false
      NUGET_API_KEY:
        required: true
      CODECOV_TOKEN:
        required: true
      CUSTOM_NUGET_SOURCE_URL:
        required: false
        description: "Url of custom nuget (Ex: https://nuget.mydomain.com/v3/index.json)"
      CUSTOM_NUGET_API_KEY:
        required: false
        description: "ApiKey of custom nuget"

jobs:
  build:
    runs-on: windows-2022
    outputs:
      nbgv: ${{ steps.nbgv.outputs.SemVer2 }}
    steps:
      - name: Get Latest Visual Studio Version
        if: inputs.useVisualStudioPreview == true
        shell: bash
        run: |
          dotnet tool update -g dotnet-vs
          vs where release
          vs update release Enterprise
          vs modify release Enterprise +mobile +desktop +uwp +web
          vs where release

      - name: Setup Java JDK
        uses: actions/setup-java@v4.2.1
        with:
          distribution: "microsoft"
          java-version: "11"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup .NET 6/7/8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            7.0.x
            8.0.x

      - name: Install DotNet workloads
        if: inputs.installWorkflows == true
        shell: bash
        run: |
          dotnet workload install android ios tvos macos maui maccatalyst

      - name: Run Maui Installation Check
        if: inputs.useMauiCheckDotNetTool == true
        shell: bash
        run: |
          dotnet tool install -g Redth.Net.Maui.Check
          maui-check --non-interactive --fix

      - name: Add MSBuild to PATH
        if: inputs.dotNetBuild != true
        uses: microsoft/setup-msbuild@v2.0.0
        with:
          vs-prerelease: true

      - name: NBGV
        if: inputs.useNBGV == true
        id: nbgv
        uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Install NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-api-key: ${{ secrets.NuGetAPIKey }}
          nuget-version: "6.x"

      - name: NuGet Restore
        run: nuget restore ${{ inputs.solutionFile }}
        working-directory: ${{ inputs.srcFolder }}

      - name: Build with MsBuild
        if: inputs.dotNetBuild != true
        run: msbuild /t:build,pack /nowarn:MSB4011 /maxcpucount /p:NoPackageAnalysis=true /verbosity:minimal /p:Configuration=${{ inputs.configuration }} ${{ inputs.solutionFile }}
        working-directory: ${{ inputs.srcFolder }}

      - name: Build with DotNet
        if: inputs.dotNetBuild == true
        run: dotnet build --no-restore --configuration ${{ inputs.configuration }} ${{ inputs.solutionFile }}
        working-directory: ${{ inputs.srcFolder }}

      - name: Generate pack with DotNet
        if: inputs.dotNetBuild == true
        run: dotnet pack --no-restore --configuration ${{ inputs.configuration }} ${{ inputs.solutionFile }}
        working-directory: ${{ inputs.srcFolder }}

      - name: Run Unit Tests and Generate Coverage
        uses: glennawatson/coverlet-msbuild@v2.1
        if: inputs.performTests == true
        with:
          project-files: ${{ inputs.srcFolder }}${{ inputs.testProjectsFile }}
          no-build: true
          exclude-filter: "[${{inputs.productNamespacePrefix}}.*.Test.*]*,[${{inputs.productNamespacePrefix}}.Test]*,[${{inputs.productNamespacePrefix}}.TestRunner.*]*"
          include-filter: "[${{inputs.productNamespacePrefix}}*]*"
          output-format: ${{ inputs.coverletOutputformat }}
          configuration: ${{ inputs.configuration }}

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v4
        if: inputs.performTests == true
        with:
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Create NuGet Artifacts
        if: inputs.createArtifacts == true
        uses: actions/upload-artifact@master
        with:
          name: nuget
          path: "**/*.nupkg"

      - name: Save SignClient Configuration
        if: inputs.signArtifacts == true
        run: 'echo "$SIGN_CLIENT_CONFIG" > SignPackages.json'
        shell: bash
        env:
            SIGN_CLIENT_CONFIG: ${{secrets.SIGN_CLIENT_CONFIG}}

      - name: Sign NuGet Packages
        if: inputs.signArtifacts == true
        uses: glennawatson/signclient@v1
        with:
            input-files: '**/*.nupkg'
            sign-client-secret: ${{ secrets.SIGN_CLIENT_SECRET }}
            sign-client-user: ${{ secrets.SIGN_CLIENT_USER_ID }}
            project-name: reactiveui
            description: reactiveui
            config-file: SignPackages.json

      - name: Changelog
        uses: glennawatson/ChangeLog@v1
        id: changelog

      - name: Create Release
        if: inputs.createRelease == true
        uses: actions/create-release@v1.1.4
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
            tag_name: ${{ steps.nbgv.outputs.SemVer2 }}
            release_name: ${{ steps.nbgv.outputs.SemVer2 }}
            body: |
                ${{ steps.changelog.outputs.commitLog }}

      - name: Publish to Nuget
        if: inputs.publishNuget == true
        env:
            NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}
            SOURCE_URL: https://api.nuget.org/v3/index.json
        run: |
            dotnet nuget push -s ${{ env.SOURCE_URL }} -k ${{ env.NUGET_AUTH_TOKEN }} --skip-duplicate **/*.nupkg

      - name: Publish to Nuget
        if: inputs.publishCustomNuget == true
        env:
            CUSTOM_NUGET_AUTH_TOKEN: ${{ secrets.CUSTOM_NUGET_API_KEY }}
            CUSTOM_SOURCE_URL: ${{ secrets.CUSTOM_NUGET_SOURCE_URL }}
        run: |
            dotnet nuget push -s ${{ env.CUSTOM_SOURCE_URL }} -k ${{ env.CUSTOM_NUGET_AUTH_TOKEN }} --skip-duplicate **/*.nupkg
